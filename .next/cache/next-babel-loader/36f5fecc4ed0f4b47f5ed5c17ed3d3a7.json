{"ast":null,"code":"import firebase from '../../../lib/myFirebase';\nexport const getListings = async () => {\n  try {\n    // let previous = false;\n    // let w = await createWhereClauses({ appliedFilters });\n    let query = firebase.collection(\"listings\"); // for (let i of w) {\n    // \tquery = query.where(...i);\n    // }\n    // //query = query.where(\"PropertyType\",\"All\");\n\n    query = query.orderBy(\"LastChangeTimestamp\", \"desc\"); //Matrix_Unique_ID\n    // if (fetchPrevious) {\n    // \tquery = query.endBefore(firstListing);\n    // }\n    // if (startAfter) {\n    // \tquery = query.startAfter(lastListing);\n    // \tprevious = true;\n    // }\n\n    await query.limit(10).get().then(async res => {\n      // count = count + 1;\n      // var circularObj = {};\n      // circularObj.circularRef = res.docs[res.docs.length-1];\n      // circularObj.list = [ circularObj, circularObj ];\n      // lastListing = res.docs[res.docs.length - 1];\n      // if(count%2 === 0 || count === 1){\n      // \tif(count !== 2){\n      // firstListing = res.docs[0];\n      // \t}\n      // }\n      const data = res.docs.map(doc => {\n        return doc.data();\n      });\n      return data; // dispatch(saveFirstListObj({ data: data[0] }));\n      // dispatch(getListingSuccess({ data, previous }));\n    });\n  } catch (error) {\n    console.error(\"error getListings =>\", error);\n    return error;\n  }\n};","map":{"version":3,"sources":["/home/b-rave/Documents/jalaj/trulia-clone/hello-next/pages/api/getListings/getListingFunc.js"],"names":["firebase","getListings","query","collection","orderBy","limit","get","then","res","data","docs","map","doc","error","console"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,yBAArB;AAEA,OAAO,MAAMC,WAAW,GAAG,YAAY;AAEnC,MAAI;AACA;AACA;AACA,QAAIC,KAAK,GAAGF,QAAQ,CAACG,UAAT,CAAoB,UAApB,CAAZ,CAHA,CAIA;AACA;AACA;AACA;;AACAD,IAAAA,KAAK,GAAGA,KAAK,CAACE,OAAN,CAAc,qBAAd,EAAqC,MAArC,CAAR,CARA,CAQqD;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMF,KAAK,CACNG,KADC,CACK,EADL,EAEDC,GAFC,GAGDC,IAHC,CAGI,MAAMC,GAAN,IAAa;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAMC,IAAI,GAAGD,GAAG,CAACE,IAAJ,CAASC,GAAT,CAAaC,GAAG,IAAI;AAC7B,eAAOA,GAAG,CAACH,IAAJ,EAAP;AACH,OAFY,CAAb;AAGA,aAAOA,IAAP,CAde,CAef;AACA;AACH,KApBC,CAAN;AAqBH,GAtCD,CAsCE,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;AACA,WAAOA,KAAP;AACH;AACJ,CA5CM","sourcesContent":["import firebase from '../../../lib/myFirebase';\n\nexport const getListings = async () => {\n\n    try {\n        // let previous = false;\n        // let w = await createWhereClauses({ appliedFilters });\n        let query = firebase.collection(\"listings\");\n        // for (let i of w) {\n        // \tquery = query.where(...i);\n        // }\n        // //query = query.where(\"PropertyType\",\"All\");\n        query = query.orderBy(\"LastChangeTimestamp\", \"desc\");//Matrix_Unique_ID\n\n        // if (fetchPrevious) {\n        // \tquery = query.endBefore(firstListing);\n        // }\n        // if (startAfter) {\n        // \tquery = query.startAfter(lastListing);\n        // \tprevious = true;\n        // }\n        await query\n            .limit(10)\n            .get()\n            .then(async res => {\n                // count = count + 1;\n                // var circularObj = {};\n                // circularObj.circularRef = res.docs[res.docs.length-1];\n                // circularObj.list = [ circularObj, circularObj ];\n                // lastListing = res.docs[res.docs.length - 1];\n                // if(count%2 === 0 || count === 1){\n                // \tif(count !== 2){\n                // firstListing = res.docs[0];\n                // \t}\n                // }\n                const data = res.docs.map(doc => {\n                    return doc.data()\n                });\n                return data;\n                // dispatch(saveFirstListObj({ data: data[0] }));\n                // dispatch(getListingSuccess({ data, previous }));\n            });\n    } catch (error) {\n        console.error(\"error getListings =>\", error)\n        return error;\n    }\n};"]},"metadata":{},"sourceType":"module"}